-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-12-20 21:39:43 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE assignations (
    assignation_id NUMBER(3) NOT NULL,
    start_date     DATE NOT NULL,
    end_date       DATE NOT NULL,
    musician_id    NUMBER(3) NOT NULL,
    instrument_id  NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE assignations ADD CONSTRAINT assignations_end_date_ck CHECK ( end_date > start_date );

ALTER TABLE assignations
    ADD CONSTRAINT asignations_pk PRIMARY KEY ( assignation_id,
                                                musician_id,
                                                instrument_id );

CREATE TABLE concert_requirments (
    concert_id  NUMBER(3) NOT NULL,
    type        VARCHAR2(20) NOT NULL,
    musician_id NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE concert_requirments
    ADD CONSTRAINT concert_requirments_pk PRIMARY KEY ( concert_id,
                                                        type,
                                                        musician_id );

ALTER TABLE concert_requirments ADD CONSTRAINT concert_id_type_uk UNIQUE ( concert_id,
                                                                           type );

CREATE TABLE concerts (
    concert_id   NUMBER(3) NOT NULL,
    location     VARCHAR2(20) NOT NULL,
    concert_date DATE NOT NULL
)
LOGGING;

ALTER TABLE concerts
    ADD CONSTRAINT concerts_location_ck CHECK ( length(location) > 1 );

ALTER TABLE concerts ADD CONSTRAINT concerts_pk PRIMARY KEY ( concert_id );

ALTER TABLE concerts ADD CONSTRAINT concerts_date_location_uk UNIQUE ( location,
                                                                       concert_date );

CREATE TABLE instruments (
    type            VARCHAR2(20) NOT NULL,
    units_available NUMBER(2) NOT NULL,
    units_allocated NUMBER(2) DEFAULT 0 NOT NULL,
    category        VARCHAR2(25) NOT NULL
)
LOGGING;

ALTER TABLE instruments
    ADD CONSTRAINT instrument_type_ck CHECK ( length(type) > 1 );

ALTER TABLE instruments ADD CONSTRAINT instrument_units_available_ck CHECK ( units_available > 1 );

ALTER TABLE instruments ADD CONSTRAINT instruments_units_allocated_ck CHECK ( units_allocated <= units_available );

ALTER TABLE instruments
    ADD CONSTRAINT instrument_category_ck CHECK ( category IN ( 'Brass', 'Percussion', 'Strings', 'Woodwinds' ) );

ALTER TABLE instruments ADD CONSTRAINT instruments_pk PRIMARY KEY ( type );

CREATE TABLE inventory (
    instrument_id      NUMBER(3) NOT NULL,
    conservation_state VARCHAR2(20) NOT NULL,
    type               VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE inventory
    ADD CONSTRAINT inventory_conservation_state CHECK ( conservation_state IN ( 'Good', 'New', 'Not_Usable' ) );

ALTER TABLE inventory ADD CONSTRAINT instrument_inventory_pk PRIMARY KEY ( instrument_id );

CREATE TABLE musical_pieces (
    code   NUMBER(3) NOT NULL,
    title  VARCHAR2(25) NOT NULL,
    author VARCHAR2(25)
)
LOGGING;

ALTER TABLE musical_pieces
    ADD CONSTRAINT musical_piece_title_ck CHECK ( length(title) > 1 );

ALTER TABLE musical_pieces
    ADD CONSTRAINT musical_piece_author_ck CHECK ( length(author) > 1 );

ALTER TABLE musical_pieces ADD CONSTRAINT musical_pieces_pk PRIMARY KEY ( code );

ALTER TABLE musical_pieces ADD CONSTRAINT musical_pieces_title_uk UNIQUE ( title );

CREATE TABLE musician_details (
    contact_email VARCHAR2(30) NOT NULL,
    birth_date    DATE,
    musician_id   NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE musician_details
    ADD CONSTRAINT musicians_details_email_ck CHECK ( REGEXP_LIKE ( contact_email,
                                                                    '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE musician_details ADD CONSTRAINT musician_details_pk PRIMARY KEY ( musician_id );

ALTER TABLE musician_details ADD CONSTRAINT musician_email_uk UNIQUE ( contact_email );

CREATE TABLE musicians (
    musician_id     NUMBER(3) NOT NULL,
    name            VARCHAR2(30) NOT NULL,
    year_of_studies NUMBER(2) NOT NULL,
    type            VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE musicians
    ADD CONSTRAINT musicians_name_ck CHECK ( length(name) > 1 );

ALTER TABLE musicians ADD CONSTRAINT musicians_year_of_studies_ck CHECK ( year_of_studies >= 5 );

ALTER TABLE musicians ADD CONSTRAINT musicians_pk PRIMARY KEY ( musician_id );

ALTER TABLE musicians ADD CONSTRAINT musicians_name_type_uk UNIQUE ( name,
                                                                     type );

CREATE TABLE repertory (
    musical_pieces_code NUMBER(3) NOT NULL,
    concerts_concert_id NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE repertory ADD CONSTRAINT repertory_pk PRIMARY KEY ( musical_pieces_code,
                                                                concerts_concert_id );

CREATE TABLE requirment (
    musical_pieces_code NUMBER(3) NOT NULL,
    instruments_type    VARCHAR2(20) NOT NULL,
    units_needed        NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE requirment ADD CONSTRAINT requirment_units_needed_ck CHECK ( units_needed > 0 );

ALTER TABLE requirment ADD CONSTRAINT requirment_pk PRIMARY KEY ( musical_pieces_code,
                                                                  instruments_type );

ALTER TABLE concert_requirments
    ADD CONSTRAINT concert_requirments_fk FOREIGN KEY ( concert_id )
        REFERENCES concerts ( concert_id )
    NOT DEFERRABLE;

ALTER TABLE musician_details
    ADD CONSTRAINT detailed FOREIGN KEY ( musician_id )
        REFERENCES musicians ( musician_id )
    NOT DEFERRABLE;

ALTER TABLE inventory
    ADD CONSTRAINT instrument_inventory_fk FOREIGN KEY ( type )
        REFERENCES instruments ( type )
    NOT DEFERRABLE;

ALTER TABLE concert_requirments
    ADD CONSTRAINT instrument_requirments_fk FOREIGN KEY ( type )
        REFERENCES instruments ( type )
    NOT DEFERRABLE;

ALTER TABLE musicians
    ADD CONSTRAINT instruments_musicians_fk FOREIGN KEY ( type )
        REFERENCES instruments ( type )
    NOT DEFERRABLE;

ALTER TABLE assignations
    ADD CONSTRAINT inventory_assignations_fk FOREIGN KEY ( instrument_id )
        REFERENCES inventory ( instrument_id )
    NOT DEFERRABLE;

ALTER TABLE assignations
    ADD CONSTRAINT musicians_assignations_fk FOREIGN KEY ( musician_id )
        REFERENCES musicians ( musician_id )
    NOT DEFERRABLE;

ALTER TABLE concert_requirments
    ADD CONSTRAINT musicians_requirments_fk FOREIGN KEY ( musician_id )
        REFERENCES musicians ( musician_id )
    NOT DEFERRABLE;

ALTER TABLE repertory
    ADD CONSTRAINT repertory_concerts_fk FOREIGN KEY ( concerts_concert_id )
        REFERENCES concerts ( concert_id )
    NOT DEFERRABLE;

ALTER TABLE repertory
    ADD CONSTRAINT repertory_musical_pieces_fk FOREIGN KEY ( musical_pieces_code )
        REFERENCES musical_pieces ( code )
    NOT DEFERRABLE;

ALTER TABLE requirment
    ADD CONSTRAINT requirment_instruments_fk FOREIGN KEY ( instruments_type )
        REFERENCES instruments ( type )
    NOT DEFERRABLE;

ALTER TABLE requirment
    ADD CONSTRAINT requirment_musical_pieces_fk FOREIGN KEY ( musical_pieces_code )
        REFERENCES musical_pieces ( code )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_Assignations_BRIU 
BEFORE INSERT OR UPDATE ON Assignations 
FOR EACH ROW 
BEGIN
    IF :new.Start_Date <= SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Data invalida: ' || TO_CHAR(:new.Start_Date, 'DD.MM.YYYY HH24:MI:SS') || ' trebuie sa fie mai mare decat data curenta.');
    END IF; 
END;
/

CREATE OR REPLACE TRIGGER Trg_Concerts_BRIU 
    BEFORE INSERT OR UPDATE ON Concerts 
    FOR EACH ROW 
BEGIN
IF( :new.Concert_Date <= SYSDATE )
THEN
RAISE_APPLICATION_ERROR( -20001,
'Data invalida: ' || TO_CHAR( :new.Concert_Date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai mare decat data curenta.' );
END IF;
END; 
/

CREATE SEQUENCE assignation_id_seq START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER assignation_id_seq_trg BEFORE
    INSERT ON assignations
    FOR EACH ROW
    WHEN ( new.assignation_id IS NULL )
BEGIN
    :new.assignation_id := assignation_id_seq.nextval;
END;
/

CREATE SEQUENCE concert_id_seq START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER concert_id_seq_trg BEFORE
    INSERT ON concerts
    FOR EACH ROW
    WHEN ( new.concert_id IS NULL )
BEGIN
    :new.concert_id := concert_id_seq.nextval;
END;
/

CREATE SEQUENCE inventory_instr_id_seq START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER inventory_instr_id_seq_trg BEFORE
    INSERT ON inventory
    FOR EACH ROW
    WHEN ( new.instrument_id IS NULL )
BEGIN
    :new.instrument_id := inventory_instr_id_seq.nextval;
END;
/

CREATE SEQUENCE musical_piece_seq START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER musical_piece_seq_trg BEFORE
    INSERT ON musical_pieces
    FOR EACH ROW
    WHEN ( new.code IS NULL )
BEGIN
    :new.code := musical_piece_seq.nextval;
END;
/

CREATE SEQUENCE musician_id_seq START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER musician_id_seq_trg BEFORE
    INSERT ON musicians
    FOR EACH ROW
    WHEN ( new.musician_id IS NULL )
BEGIN
    :new.musician_id := musician_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            10
-- CREATE INDEX                             0
-- ALTER TABLE                             40
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           8
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          5
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
